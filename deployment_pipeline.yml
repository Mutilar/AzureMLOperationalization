stages:
- stage: Deployment
  jobs:
  - job: 
    displayName: Deployment Job
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    # SET PYTHON VERSION
    - task: UsePythonVersion@0
      displayName: "Setting Required Python Version for Azure Functions"
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'
    # INIT CONDA ENVIRONMENT
    - bash: |
        python3.6 -m venv worker_venv
        source worker_venv/bin/activate
        pip3.6 install setuptools
        pip3.6 install -r requirements.txt
      displayName: Install Dependencies
    # UNIT TESTING
    - bash: |
        source worker_venv/bin/activate
        pytest
      displayName: Run Unit Tests
    # BUNDLE FUNCTION
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/output.zip'
        replaceExistingArchive: true
    # DEPLOY FUNCTION
    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: '$(fx.azureSubscription)'
        appType: 'functionAppLinux'
        appName: '$(fx.name)'
        package: '$(System.DefaultWorkingDirectory)/output.zip'
# - stage: Validation
#   dependsOn:
#   - Deployment
#   condition: succeeded('Deployment') 
#   jobs:
#   - job: 
#     displayName: End-to-End Testing Job
#     pool: server
#     timeoutInMinutes: 0 # Defining Max Runtime
#     steps:
#     # E2E TESTING
#     - task: PublishToAzureServiceBus@1
#       inputs:
#         azureSubscription: 'test'
#         messageBody: >
#           {
#             "job": "!START",
#             "auth_token": "$(system.AccessToken)",
#             "build_id": "$(Build.BuildId)",
#             "run_condition": "all_pass",
#             "run_config": {
#               "repo": "$(gh.repo)",
#               "version": "$(rp.version)",
#               "notebooks": "$(rp.notebooks)",
#               "conda_file": "$(rp.condaFile)",
#               "compute_target": "$(ex.compute)",
#               "base_image": "$(ex.image)"
#             },
#             "azure_resources": {
#               "organization": "$(do.organization)",
#               "project": "$(do.project)",
#               "run_id": "default_run_id",
#               "service_principal": {
#                 "username": "$(sp.client)",
#                 "tenant": "$(sp.tenant)",
#                 "password": "$(sp.password)"
#               },
#               "workspace": {
#                 "name": "$(ws.name)",
#                 "subscription_id": "$(ws.subscription)",
#                 "resource_group": "$(ws.resourceGroup)"
#               }
#             },
#             "wrap_up": {
#               "queue": {
#                 "connection_string": "$(sb.connection)",
#                 "name": "$(sb.name)"
#               },
#               "call_back": {
#                 "error_message": "default_error_message",
#                 "project_url": "$(System.TeamFoundationCollectionUri)",
#                 "project_id": "$(system.TeamProjectId)",
#                 "hub_name": "$(system.HostType)",
#                 "plan_id": "$(system.PlanId)",
#                 "job_id": "$(system.JobId)",
#                 "task_id": "$(system.TaskInstanceId)"
#               }
#             }
#           }
#         waitForCompletion: true # Allows for POST callback to close pipeline